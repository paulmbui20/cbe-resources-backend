# Generated by Django 5.2.6 on 2025-09-24 23:05

import core.utils
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('pp1', 'PP1'), ('pp2', 'PP2'), ('grade1', 'Grade 1'), ('grade2', 'Grade 2'), ('grade3', 'Grade 3'), ('grade4', 'Grade 4'), ('grade5', 'Grade 5'), ('grade6', 'Grade 6'), ('grade7', 'Grade 7'), ('grade8', 'Grade 8'), ('grade9', 'Grade 9'), ('form1', 'Form 1'), ('form2', 'Form 2'), ('form3', 'Form 3'), ('form4', 'Form 4')], max_length=20, unique=True)),
                ('display_name', models.CharField(max_length=50)),
                ('order', models.PositiveIntegerField(unique=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, help_text='SEO title (max 60 chars)', max_length=60)),
                ('meta_description', models.CharField(blank=True, help_text='SEO description (max 160 chars)', max_length=160)),
                ('meta_keywords', models.CharField(blank=True, help_text='SEO keywords, comma-separated', max_length=200)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, help_text='Flowbite svg icon', null=True, upload_to='')),
                ('image', models.ImageField(blank=True, null=True, upload_to=core.utils.secure_category_image_upload_path)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order for display')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meta_title', models.CharField(blank=True, help_text='SEO title (max 60 chars)', max_length=60)),
                ('meta_description', models.CharField(blank=True, help_text='SEO description (max 160 chars)', max_length=160)),
                ('meta_keywords', models.CharField(blank=True, help_text='SEO keywords, comma-separated', max_length=200)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField(help_text='Brief description for listings')),
                ('content', models.TextField(help_text='Detailed content description')),
                ('product_type', models.CharField(choices=[('notes', 'Notes'), ('scheme', 'Scheme of Work'), ('curriculum', 'Curriculum Design'), ('guide', 'Teaching Guide'), ('assessment', 'Assessment Tool'), ('lesson_plan', 'Lesson Plans'), ('workbook', 'Workbook'), ('textbook', 'Textbook')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_free', models.BooleanField(default=False)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('preview_file', models.FileField(blank=True, help_text='Preview file for customers (first few pages)', null=True, upload_to=core.utils.secure_preview_upload_path)),
                ('main_file', models.FileField(help_text='Main product file', upload_to=core.utils.secure_product_upload_path)),
                ('thumbnail', models.ImageField(help_text='Product thumbnail image', upload_to=core.utils.secure_thumbnail_upload_path)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('rating_average', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_bestseller', models.BooleanField(default=False)),
                ('main_file_type', models.CharField(blank=True, help_text='Detected file type', max_length=10)),
                ('preview_file_type', models.CharField(blank=True, help_text='Detected file type', max_length=10)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_products', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category')),
                ('grade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.grade')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(upload_to=core.utils.secure_product_image_upload_path)),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('order', models.PositiveIntegerField(default=0)),
                ('detected_type', models.CharField(blank=True, help_text='Detected image type', max_length=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='additional_images',
            field=models.ManyToManyField(blank=True, related_name='additional_product_images', to='products.productimage'),
        ),
        migrations.AddField(
            model_name='product',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.subject'),
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('review', models.TextField()),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=True)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('product', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ProductViewHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_history', to='products.product')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['product', 'created_at'], name='products_pr_product_b0dad4_idx'), models.Index(fields=['ip_address', 'created_at'], name='products_pr_ip_addr_c6573c_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'is_featured'], name='products_pr_status_28f1d7_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='products_pr_categor_75eeb5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['subject', 'grade'], name='products_pr_subject_5f2298_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['vendor', 'status'], name='products_pr_vendor__5c0a65_idx'),
        ),
    ]
